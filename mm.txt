
using EskaCMS.Core.BusinessModels;
using EskaCMS.EskaCoreIntegration.Services.Interfaces;
using EskaCMS.EskaCoreIntegration.ViewModels;
using Microsoft.Extensions.Configuration;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;

namespace EskaCMS.EskaCoreIntegration.Services
{
    public class EskaCoreIntegrationService : IEskaCoreIntegrationService
    {
        public readonly IConfiguration _configuration;
        //public readonly IPasswordPolicyService _PasswordPolicy;
        public string baseApiUrl = "";
        public string CoreAuthUser = string.Empty;
        public string CoreAuthPassword = string.Empty;

        public EskaCoreIntegrationService(IConfiguration configuration)
        {
            _configuration = configuration;
            baseApiUrl = _configuration.GetValue<string>("EskaCore:BaseApiUrl");
            CoreAuthUser = _configuration.GetValue<string>("EskaCore:DefaultUserName");
            CoreAuthPassword = _configuration.GetValue<string>("EskaCore:DefaultPassword");

        }
        public async Task<EskaCoreBaseResponseVM<CoreAuthResponseVM>> Authenticate()
        {
            try
            {
                using (var client = new HttpClient())
                {
                    client.BaseAddress = new Uri(baseApiUrl);
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                    //POST Method  
                  

                    CoreAuthVM requestVM = new CoreAuthVM
                    {
                        BranchId = 1,
                        CompanyId = 1,
                        Username = CoreAuthUser,
                        Password = CoreAuthPassword,
                        IncludeRefreshToken = true
                    };
                    var request = JsonSerializer.Serialize(requestVM);
                    var requestContent = new StringContent(request, Encoding.UTF8, "application/json");

                    HttpResponseMessage response = await client.PostAsync("api/CoreAPIAuthenticator/Login", requestContent);
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<CoreAuthResponseVM>>(responseContent);
                    return returnResponse;

                }
            }
            catch (Exception e)
            {

                throw e;
            }

        }
        public async Task<EskaCoreBaseResponseVM<CoreAuthResponseVM>> RefreshToken(string accessToken, string refreshToken)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                //POST Method  
                CoreAuthRequestVM requestVM = new CoreAuthRequestVM
                {
                    Token = accessToken,
                    RefreshToken = refreshToken,
                };
                var request = JsonSerializer.Serialize(requestVM);
                var requestContent = new StringContent(request, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.PostAsync("api/CoreAPIAuthenticator/RefreshToken", requestContent);
                string responseContent = response.Content.ReadAsStringAsync().Result;
                EskaCoreBaseResponseVM<CoreAuthResponseVM> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<CoreAuthResponseVM>>(responseContent);
                return returnResponse;

            }

        }
        public async Task<EskaCoreBaseResponseVM<CoreAuthResponseVM>> LoginWithoutPassword(CoreWPAuthVM coreAuth)
        {
            try
            {
                using (var client = new HttpClient())
                {
                    client.BaseAddress = new Uri(baseApiUrl);
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    //POST Method  
                    CoreWPAuthVM requestVM = new CoreWPAuthVM
                    {
                        BranchId = coreAuth.BranchId,
                        CompanyId = coreAuth.CompanyId,
                        Username = coreAuth.Username,
                        IncludeRefreshToken = true
                    };
                    var request = JsonSerializer.Serialize(requestVM);
                    var requestContent = new StringContent(request, Encoding.ASCII, "application/json");

                    HttpResponseMessage response = await client.PostAsJsonAsync("api/CoreAPIAuthenticator/LoginWithoutPassword", requestContent);
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<CoreAuthResponseVM>>(responseContent);
                    return returnResponse;

                }
            }
            catch (Exception e)
            {

                throw e;
            }

        }
        public async Task<EskaCoreBaseResponseVM> InsertUser(UserForm user,string token="")
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",!string.IsNullOrEmpty(token)?token: Authenticate().Result.content.Token);

                //POST Method  
                EskaCoreInsertUserVM requestVM = new EskaCoreInsertUserVM
                {
                    BIRTH_DATE = DateTime.Now,
                    CREATED_BY = "ESKA DCMS",
                    CRG_BRN_ID = 1,
                    CRG_COM_ID = 1,
                    EFFECTIVE_DATE = DateTime.Now.ToString(),
                    EMAIL = user.Email,
                    EXPIRY_DATE = DateTime.Now.AddYears(10).ToString(),
                    FAILED_LOGIN_ATTEMPTS = 0,
                    IP_ADDRESS = "1921684554",
                    NAME = user.FullName,
                    PASSWORD = user.Password,
                    PROF_ID = 1,
                    STATUS = 1,
                    STATUS_DATE = DateTime.Now.ToString(),
                    UI_THEME = 1,
                    USERNAME = user.UserName.ToUpper()
                };
                var request = JsonSerializer.Serialize(requestVM);
                var requestContent = new StringContent(request, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.PostAsync("api/v1/User/InsertUsers", requestContent);
                string responseContent = response.Content.ReadAsStringAsync().Result;
                EskaCoreBaseResponseVM returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM>(responseContent);
                if (user.CoreGroupsIds != null)
                {
                    foreach (var group in user.CoreGroupsIds)
                    {
                        InsertCoreGroupVM insertCoreGroupVM = new InsertCoreGroupVM
                        {
                            CRG_COM_ID = 1,
                            CSR_GRP_ID = group,
                            USERNAME = user.UserName.ToUpper()
                        };
                        
                        await InsertUserGroup(insertCoreGroupVM);
                    }
                }
                InsertUserBranchVM insertUserBranchVM = new InsertUserBranchVM
                {
                    CRG_COM_ID = 1,
                    CRG_BRN_ID = 1,
                    Username = user.UserName.ToUpper(),
                    CREATED_BY="DCMS Background service"
                };
                await InsertUserBranch(insertUserBranchVM);
                return returnResponse;

            }
        }
        public async Task<EskaCoreBaseResponseVM> InsertUserGroup(InsertCoreGroupVM requestVM)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Authenticate().Result.content.Token);

                //POST Method  

                var request = JsonSerializer.Serialize(requestVM);
                var requestContent = new StringContent(request, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.PostAsync("api/v1/Groups/InsertUserGroup", requestContent);
                string responseContent = response.Content.ReadAsStringAsync().Result;
                EskaCoreBaseResponseVM returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM>(responseContent);
                return returnResponse;

            }

        } 
        public async Task<EskaCoreBaseResponseVM> InsertUserBranch(InsertUserBranchVM requestVM)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", requestVM.AuthToken);

                //POST Method  

                var request = JsonSerializer.Serialize(requestVM);
                var requestContent = new StringContent(request, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.PostAsync("api/v1/Branch/InsertUserBranches", requestContent);
                string responseContent = response.Content.ReadAsStringAsync().Result;
                EskaCoreBaseResponseVM returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM>(responseContent);
                return returnResponse;

            }

        }
        public async Task<EskaCoreBaseResponseVM<CoreAuthResponseVM>> Login(CoreAuthVM coreAuth)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                //POST Method  
                CoreAuthVM requestVM = new CoreAuthVM
                {
                    BranchId = coreAuth.BranchId,
                    CompanyId = coreAuth.CompanyId,
                    Username = coreAuth.Username,
                    Password = coreAuth.Password,
                    IncludeRefreshToken = coreAuth.IncludeRefreshToken
                };

                var request = JsonSerializer.Serialize(requestVM);
                var requestContent = new StringContent(request, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.PostAsync("api/CoreAPIAuthenticator/Login", requestContent);
                string responseContent = response.Content.ReadAsStringAsync().Result;
                EskaCoreBaseResponseVM<CoreAuthResponseVM> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<CoreAuthResponseVM>>(responseContent);
                return returnResponse;

            }

        }
        public async Task<EskaCoreBaseResponseVM<CoreCompanyModel[]>> GetAllCompanies(string authToken)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                //GET Method  
                HttpResponseMessage response = await client.GetAsync("api/v1/Company/GetCompanyInfo");
                if (response.StatusCode != System.Net.HttpStatusCode.Unauthorized)
                {
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<CoreCompanyModel[]> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<CoreCompanyModel[]>>(responseContent);

                    return returnResponse;
                }
                else
                {
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> authResponse = await Authenticate();
                    return await GetAllCompanies(authResponse.content.Token);
                }
            }

        } 
        public async Task<EskaCoreBaseResponseVM> ChangeUserPassword(CoreUserChangePasswordVM requestVM)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", requestVM.TOKEN);
                //PUT Method  
               
                var request = JsonSerializer.Serialize(requestVM);
                var requestContent = new StringContent(request, Encoding.UTF8, "application/json");
                //IsValidPasswordAsync();
                HttpResponseMessage response = await client.PutAsync("api/v1/User/UpdateUserPassword",requestContent);
               
                
                //UsersPasswordHistory usersPasswordHistory = new UsersPasswordHistory();
                //usersPasswordHistory.NewPassword = requestVM.PASSWORD;
                //usersPasswordHistory.OldPassword = ;
                //usersPasswordHistory.Date = DateTime.Now;
                //usersPasswordHistory.UsersSitesId = _workContext.GetCurrentSiteId();
                //_UsersPasswordHistoryRepo.Update(usersPasswordHistory);
                //_UsersPasswordHistoryRepo.SaveChanges();


                if (response.StatusCode != System.Net.HttpStatusCode.Unauthorized)
                {
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM>(responseContent);

                    return returnResponse;
                }
                else
                {
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> authResponse = await Authenticate();
                    requestVM.TOKEN = authResponse.content.Token;
                    return await ChangeUserPassword(requestVM);
                }
            }

        }
        public async Task<EskaCoreBaseResponseVM<List<CoreMenuVM>>> GetAllMenus(string authToken)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                //GET Method  
                HttpResponseMessage response = await client.GetAsync("api/v1/Menus/LoadAuthorizedMenuLegacy?USERNAME=admin&CRG_COM_ID=1");
                if (response.StatusCode != System.Net.HttpStatusCode.Unauthorized)
                {
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<List<CoreMenuVM>> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<List<CoreMenuVM>>>(responseContent);
                    foreach (var menu in returnResponse.content.OrderBy(x => x.MENU_TYPE))
                    {
                        menu.Childs = returnResponse.content.Where(x => x.CAM_SMU_ID == menu.ID).ToList();
                    }
                    returnResponse.content = returnResponse.content.Where(x => x.MENU_TYPE == 1).ToList();
                    return returnResponse;
                }
                else
                {
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> authResponse = await Authenticate();
                    return await GetAllMenus(authResponse.content.Token);
                }
            }

        }
        public async Task<EskaCoreBaseResponseVM<List<CoreGroupVM>>> GetAllGroups(string authToken)
        {
            if(string.IsNullOrEmpty(authToken))
            {
                var s = new CoreWPAuthVM
                {
                    BranchId = 1,
                    CompanyId = 1,
                    Username = "f.sirhan@eskadenia.com",
                    IncludeRefreshToken = true,
                };
                var FindTokenWithOutPassword = LoginWithoutPassword(s);
                authToken = FindTokenWithOutPassword.Result.content.Token;
            }
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                //GET Method  
                HttpResponseMessage response = await client.GetAsync("api/v1/Groups/GetGroups");
                if ((response.StatusCode != System.Net.HttpStatusCode.Unauthorized) || (response.StatusCode != System.Net.HttpStatusCode.InternalServerError))
                {
                    var responseContent = response.Content.ReadAsStringAsync();
                    EskaCoreBaseResponseVM<List<CoreGroupVM>> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<List<CoreGroupVM>>>(responseContent.Result);
                    return returnResponse;
                }
                else
                {
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> authResponse = await Authenticate();
                    return await GetAllGroups(authResponse.content.Token);
                }
            }

        } 
        public async Task<EskaCoreBaseResponseVM<List<CoreGroupVM>>> GetUserInfo(string authToken,string username)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                //GET Method  
                HttpResponseMessage response = await client.GetAsync("api/v1/User/GetUsersInfo?USERNAME="+username);
                if ((response.StatusCode != System.Net.HttpStatusCode.Unauthorized))
                {
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<List<CoreGroupVM>> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<List<CoreGroupVM>>>(responseContent);
                    return returnResponse;
                }
                else
                {
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> authResponse = await Authenticate();
                    return await GetUserInfo(authResponse.content.Token,username);
                }
            }

        }
        public async Task<EskaCoreBaseResponseVM<List<CoreUserVM>>> GetAllUsers(string authToken)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                //GET Method  
                HttpResponseMessage response = await client.GetAsync("api/v1/User/GetUsers?CRG_COM_ID=1");
                if (response.StatusCode != System.Net.HttpStatusCode.Unauthorized)
                {
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<List<CoreUserVM>> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<List<CoreUserVM>>>(responseContent);
                    return returnResponse;
                }
                else
                {
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> authResponse = await Authenticate();
                    return await GetAllUsers(authResponse.content.Token);
                }
            }

        }
        public async Task<EskaCoreBaseResponseVM<List<CoreMenuVM>>> GetAuthorizedMenus(GetCoreMenusVM request)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", request.AuthToken);
                //GET Method  
                HttpResponseMessage response = await client.GetAsync("api/v1/Menus/LoadAuthorizedMenuLegacy?USERNAME=" + request.Username + "&CRG_COM_ID=" + request.ComId + "&LANG_ID=1");
                if (response.StatusCode != System.Net.HttpStatusCode.Unauthorized)
                {
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<List<CoreMenuVM>> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<List<CoreMenuVM>>>(responseContent);
                    //CoreRefreshAuthMenuVM resObj = new CoreRefreshAuthMenuVM { AuthMenus = returnResponse, CoureAuth =new CoreAuthRequestVM { Token = request.AuthToken, RefreshToken = request.RefreshToken} };
                    foreach (var menu in returnResponse.content.OrderBy(x => x.MENU_TYPE))
                    {
                        menu.Childs = returnResponse.content.Where(x => x.CAM_SMU_ID == menu.ID).ToList();
                    }
                    returnResponse.content = returnResponse.content.Where(x => x.MENU_TYPE == 1).ToList();
                    return returnResponse;
                }
                //CoreWPAuthVM coreWPAuthVM = new CoreWPAuthVM
                //{
                //    BranchId=1,
                //    CompanyId =Convert.ToInt32(request.ComId),
                //    IncludeRefreshToken = true,
                //    Username = request.Username
                //};
                //EskaCoreBaseResponseVM<CoreAuthResponseVM> coreAuthResponse = await LoginWithoutPassword(coreWPAuthVM);
                //request.AuthToken = coreAuthResponse.content.Token;
                //request.RefreshToken = coreAuthResponse.content.RefreshToken;
                throw new UnauthorizedAccessException();
            }

        }
        public async Task<EskaCoreBaseResponseVM<CoreBranchModel[]>> GetBranchesByCompanyId(int companyId, string authToken)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(baseApiUrl);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.api+json"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                //GET Method  
                HttpResponseMessage response = await client.GetAsync("api/v1/Branch/GetBranchesByCompany?CRG_COM_ID=" + companyId + "&LANG_ID=1");
                if (response.StatusCode != System.Net.HttpStatusCode.Unauthorized)
                {
                    string responseContent = response.Content.ReadAsStringAsync().Result;
                    EskaCoreBaseResponseVM<CoreBranchModel[]> returnResponse = JsonSerializer.Deserialize<EskaCoreBaseResponseVM<CoreBranchModel[]>>(responseContent);

                    return returnResponse;
                }
                else
                {
                    EskaCoreBaseResponseVM<CoreAuthResponseVM> authResponse = await Authenticate();
                    return await GetBranchesByCompanyId(companyId, authResponse.content.Token);
                }
            }

        }
    }
}
